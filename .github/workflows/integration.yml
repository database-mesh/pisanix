##
## Copyright 2022 SphereEx Authors
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
## http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##

name: integration test

on: push 


jobs:
  run:
    name: Integration Test
    runs-on: ubuntu-latest 
    steps:
      - name: "checkout codes" 
        uses: actions/checkout@v3
      - name: "setup kind"
        uses: helm/kind-action@v1.2.0
      - name: "setup helm"
        uses: azure/setup-helm@v2.1
      - name: "setup kubectl" 
        uses: azure/setup-kubectl@v2.0
      - name: "declare github variables" 
        id: vars
        shell: bash
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
          if [[ $GITHUB_REF == refs/tags/* ]]; then
             echo "##[set-output name=tags;]$(echo ${GITHUB_REF#refs/tags/})"  
             echo "##[set-output name=imagetag;]$(echo ${GITHUB_REF#refs/tags/})-$(git rev-parse --short HEAD)"  
          else
             echo "##[set-output name=tags;]$(echo '')"
             echo "##[set-output name=imagetag;]$(echo '')"
          fi
          if [[ $GITHUB_REF == refs/heads/* ]]; then
             echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"  
             echo "##[set-output name=imagetag;]$(echo ${GITHUB_REF#refs/heads/})-$(git rev-parse --short HEAD)"  
          else
             echo "##[set-output name=branch;]$(echo '')"
             echo "##[set-output name=imagetag;]$(echo '')"
          fi
      - name: "Pisa-Controller kaniko build"
        uses: mlycore/action-kaniko@master
        with:
          image: pisanixio/controller
          username: ${{ secrets.DOCKERHUB_CI_USERNAME }}
          password: ${{ secrets.DOCKERHUB_CI_PASSWORD }}
          registry: ${{ secrets.DOCKERHUB_CI_HOST }}
          build_file: pisa-controller/hack/Dockerfile 
          tag_with_latest: true
          extra_args: --build-arg GIT_BRANCH=${{ steps.vars.outputs.branch }} --build-arg GIT_COMMIT=${{ steps.vars.outputs.sha_short }} --build-arg GIT_TAG=${{ steps.vars.outputs.tags }}
      #- name: "Pisa-Proxy kaniko build"
      #  uses: mlycore/action-kaniko@master
      #  with:
      #    image: pisanixio/proxy
      #    username: ${{ secrets.DOCKERHUB_CI_USERNAME }}
      #    password: ${{ secrets.DOCKERHUB_CI_PASSWORD }}
      #    registry: ${{ secrets.DOCKERHUB_CI_HOST }}
      #    build_file: pisa-proxy/hack/Dockerfile
      #    tag_with_latest: true
      #    extra_args: --build-arg GIT_BRANCH=${{ steps.vars.outputs.branch }} --build-arg GIT_COMMIT=${{ steps.vars.outputs.sha_short }} --build-arg GIT_TAG=${{ steps.vars.outputs.tags }}
      - name: "install Pisa Controller"
        run: |
          set -x 
          export PISANIX_NAMESPACE="pisanix-system"
          kubectl create namespace ${PISANIX_NAMESPACE}
          kubectl create secret docker-registry uhub --docker-server=${{ secrets.DOCKERHUB_CI_HOST }} --docker-username=${{ secrets.DOCKERHUB_CI_USERNAME }} --docker-password=${{ secrets.DOCKERHUB_CI_PASSWORD }}
          kubectl create secret docker-registry uhub --docker-server=${{ secrets.DOCKERHUB_CI_HOST }} --docker-username=${{ secrets.DOCKERHUB_CI_USERNAME }} --docker-password=${{ secrets.DOCKERHUB_CI_PASSWORD }} -n ${PISANIX_NAMESPACE}
          kubectl label namespace default pisanix.io/inject=enabled
          kubectl get namespaces --show-labels
          cd charts/pisa-controller 
          helm dependency build
          cd ..
          #helm install --debug pisa-controller pisa-controller -n ${PISANIX_NAMESPACE} --set image.repository=${{ secrets.DOCKERHUB_CI_HOST }}/pisanixio/controller  --set image.tag=${{ steps.vars.outputs.imagetag }} --set proxyImage.repository=${{ secrets.DOCKERHUB_CI_HOST }}/pisanixio/proxy  --set proxyImage.tag=${{ steps.vars.outputs.imagetag }} --set image.imagePullSecrets[0].name=uhub
          helm install --debug pisa-controller pisa-controller -n ${PISANIX_NAMESPACE} --set image.repository=${{ secrets.DOCKERHUB_CI_HOST }}/pisanixio/controller  --set image.tag=${{ steps.vars.outputs.imagetag }} --set proxyImage.repository=${{ secrets.DOCKERHUB_CI_HOST }}/pisanixio/proxy  --set proxyImage.tag=fix-integration-test-29ebd0e --set image.imagePullSecrets[0].name=uhub
          kubectl get pods -n ${PISANIX_NAMESPACE}
          kubectl describe pods -n ${PISANIX_NAMESPACE}
          kubectl wait --timeout=60s --for=condition=Ready --all pod -n ${PISANIX_NAMESPACE}
          kubectl -l app=pisa-controller logs -n ${PISANIX_NAMESPACE}
          cd ..
          cd test/kubernetes
          kubectl apply -f mysql.yml 
          kubectl apply -f virtualdatabase.yml 
          kubectl apply -f trafficstrategy.yml
          kubectl apply -f databaseendpoint.yml
          kubectl apply -f app.yml 
          sleep 15
          kubectl patch deployment test  -p='{"spec": {"replicas": 0, "template": {"spec": {"imagePullSecrets": [{"name": "uhub"}]}}}}'
          kubectl get pod -A --show-labels
          sleep 15 
          kubectl get pod -A --show-labels
          kubectl scale deployment test --replicas=1 
          sleep 15 
          kubectl get pod -A --show-labels
          #kubectl wait --timeout=60s --for=condition=ready --all pod
          for _ in `seq 1 100`;do
            kubectl describe pods
            sleep 3
          done
          kubectl port-forward svc/test 3308:3306 &
          kubectl get pod -A --show-labels
          kubectl logs -l app=nginx --all-containers=true
          sleep 3
      - name: "prepare mysql" 
        uses: shogo82148/actions-setup-mysql@v1
        with:
         mysql-version: '5.7'
      - name: "run basic select test" 
        run: mysql -h127.0.0.1 -P3308 -uroot -proot -e 'SELECT UNIX_TIMESTAMP()'